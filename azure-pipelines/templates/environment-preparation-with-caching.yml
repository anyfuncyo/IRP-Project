steps:
  - template: git-checkout.yml
  - task: Bash@3
    displayName: "Print environment variable"
    condition: succeededOrFailed()
    inputs:
      targetType: inline
      script: |
        printenv
  - task: Bash@3
    displayName: "Save home directory as a variable"
    condition: succeededOrFailed()
    inputs:
      targetType: inline
      script: |
        echo "##vso[task.setvariable variable=agentHomeDirectory]$HOME"
  - task: Cache@2
    displayName: "Cache Ruby gems written in gemfile.lock file"
    condition: succeededOrFailed()
    continueOnError: true
    inputs:
      key: "gems | $(GEMFILE_LOCK_PATH)"
      path: $(BUNDLE_PATH)
      cacheHitVar: "GEMS_CACHE_RESTORED"
  - task: Cache@2
    displayName: "Cache Pods"
    condition: succeededOrFailed()
    continueOnError: true
    inputs:
      key: "pods | $(PODFILE_LOCK_PATH)"
      path: $(POD_DIRECTORY)
      cacheHitVar: "PODS_CACHE_RESTORED"
  - task: UseRubyVersion@0
    displayName: "Select Ruby version 2.7.0 to run on an agent"
    inputs:
      versionSpec: "= 2.7"
      addToPath: true
  - task: CocoaPods@0
    displayName: "Install cocoapods and run pod install"
    condition: ne(variables.PODS_CACHE_RESTORED, 'true')
    inputs:
      projectDirectory: $(PODFILE_PATH)
  - task: Bash@3
    displayName: "Install bundler and gem"
    condition: ne(variables.GEMS_CACHE_RESTORED, 'true')
    inputs:
      targetType: filePath
      filePath: $(DEPENDENCIES_SCRIPT_PATH_BUNDLER_AND_GEM_SETUP)
    env:
      RUBY_CONFIGURE_OPTS: "--with-openssl-dir=/usr/local/opt/openssl@1.1"
  - task: Bash@3
    displayName: "Check Xcode install "
    inputs:
      targetType: filePath
      filePath: $(DEPENDENCIES_SCRIPT_PATH_XCODE_SETUP)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(PODFILE_LOCK_PATH)
      ArtifactName: "Podfile.lock"
      publishLocation: "Container"
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(GEMFILE_LOCK_PATH)
      ArtifactName: "Gemfile.lock"
      publishLocation: "Container"
